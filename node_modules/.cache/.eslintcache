[{"/Users/macuser/Desktop/pothoboot/src/index.js":"1","/Users/macuser/Desktop/pothoboot/src/PhotoBooth.js":"2","/Users/macuser/Desktop/pothoboot/src/components/MainScreen.js":"3","/Users/macuser/Desktop/pothoboot/src/components/PermissonScreen.js":"4","/Users/macuser/Desktop/pothoboot/src/components/CameraScreen.js":"5","/Users/macuser/Desktop/pothoboot/src/components/SettingsModal.js":"6"},{"size":215,"mtime":1664263020000,"results":"7","hashOfConfig":"8"},{"size":825,"mtime":1664263020000,"results":"9","hashOfConfig":"8"},{"size":1700,"mtime":1664378993735,"results":"10","hashOfConfig":"8"},{"size":2053,"mtime":1664248718696,"results":"11","hashOfConfig":"8"},{"size":8328,"mtime":1664384538128,"results":"12","hashOfConfig":"8"},{"size":2528,"mtime":1664263020000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1jhal0w",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/macuser/Desktop/pothoboot/src/index.js",[],["30","31"],"/Users/macuser/Desktop/pothoboot/src/PhotoBooth.js",[],"/Users/macuser/Desktop/pothoboot/src/components/MainScreen.js",["32"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './mainScreen.css';\r\nimport './animate.compat.css';\r\n\r\nconst MainScreen = ({ setScreenToShow }) => {\r\n\r\n    return (\r\n        <div className=\"main-container_main animated fadeIn\">\r\n            <header className=\"header_main\">\r\n                <section className=\"title-section_main\">\r\n                    <div className=\"logo-wrapper_main\">\r\n                        <img\r\n                            src=\"./assets/images/logo.png\"\r\n                            alt=\"preview\"\r\n                        />  \r\n                    </div> \r\n                </section>\r\n                <section className=\"btn-section_main\">\r\n                <div \r\n                    className=\"start-wrapper_main\"\r\n                    onClick={ () => setScreenToShow('permisson') }\r\n                >\r\n                    <h1>\r\n                        <span >¡Bienvenido, ██</span> <br />\r\n                        ██ comienza aquí!\r\n                    </h1>\r\n                </div>\r\n                </section>\r\n            </header>\r\n\r\n            <main className=\"main_main\">\r\n                <div className=\"preview-wrapper_main\">\r\n                    <img\r\n                        src=\"./assets/images/preview.png\"\r\n                        alt=\"preview\"\r\n                    />\r\n                </div>\r\n\r\n                <h2>Así se verá tu foto</h2>\r\n            </main>\r\n\r\n            <div className='logo-poto'>\r\n                <img src=\"./assets/images/foto2.png\" />\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nMainScreen.propTypes = {\r\n    setScreenToShow: PropTypes.func.isRequired\r\n};\r\n\r\nexport default MainScreen;\r\n","/Users/macuser/Desktop/pothoboot/src/components/PermissonScreen.js",["33","34"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './permissonScreen.css';\r\nimport './animate.compat.css';\r\n\r\nconst PermissonScreen = ({ setScreenToShow }) => {\r\n\r\n    const handleActivateCamera = (screen) => {\r\n        \r\n        if(window.innerWidth < 1200 && window.orientation == 0) {\r\n            alert('Por favor gira tu dispositivo');\r\n        } else {\r\n            setScreenToShow(screen);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"main-container_permisson animated fadeIn\">\r\n            <header className=\"header_permisson\">\r\n                <div className=\"logo-wrapper_permisson\">\r\n                    <img\r\n                        src=\"./assets/images/logo.png\"\r\n                        alt=\"preview\"\r\n                    /> \r\n                </div>\r\n            </header>\r\n\r\n            <main className=\"main_permisson\">\r\n                <p className=\"up-p_permisson\">\r\n                    Si utilizas un dispositivo móvil (teléfono o tableta) <br/>\r\n                    por favor girar tu dispositivo horizontalmente antes de comenzar.\r\n                </p>\r\n\r\n                <div \r\n                    className=\"middle_permisson\"\r\n                    onClick={ () => handleActivateCamera('camera') }\r\n                >\r\n                    <div className=\"btn-wrapper_permison\">\r\n                        <img \r\n                            src=\"./assets/images/permisson-btn.png\"\r\n                            alt=\"hablitar camara\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <p className=\"down-p_permisson\">\r\n                    Las fotografías NO SON almacenadas, <br/>\r\n                    todo se ejecuta desde tu navegador\r\n                </p>\r\n            </main>\r\n\r\n            <div className='logo-poto'>\r\n                <img src=\"./assets/images/foto2.png\" />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nPermissonScreen.propTypes = {\r\n    setScreenToShow: PropTypes.func.isRequired\r\n};\r\n\r\nexport default PermissonScreen;\r\n","/Users/macuser/Desktop/pothoboot/src/components/CameraScreen.js",["35","36","37","38","39"],"import React, { useRef, useEffect, useState } from 'react';\r\nimport CameraPhoto, { FACING_MODES } from 'jslib-html5-camera-photo';\r\n\r\nimport SettingsModal from './SettingsModal';\r\n\r\nimport './cameraScreen.css';\r\nimport './animate.compat.css';\r\n\r\n//Variables de configuracion de enfoque y resolucion de la camara\r\nconst facingMode = FACING_MODES.USER;\r\nconst idealResolution = { width: 640, height: 480 };\r\n\r\nconst CameraScreen = () => {\r\n\r\n    const [isCameraReady, setIsCameraReady] = useState(false);\r\n    const [photoTaken, setPhotoTaken] = useState(false);\r\n    const [imageToDownload, setImageToDownload] = useState('#');\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [isTimerSet, setIsTimerSet] = useState(false);\r\n    const [isFullScreen, setIsFullScreen] = useState(false);\r\n    const [counter, setCounter] = useState(3);\r\n    const [showCounter, setShowCounter] = useState(false);\r\n    \r\n\r\n    //Crear referencia para tomar el html de video\r\n    const videoRef = useRef();\r\n    let cameraPhoto = new CameraPhoto(videoRef.current);\r\n\r\n    useEffect(() => {\r\n        //Instanciar la libreria e iniciar la camara\r\n        cameraPhoto = new CameraPhoto(videoRef.current);\r\n        startCamera(facingMode, idealResolution);\r\n            \r\n        if(window.innerWidth < 1200) {\r\n            window.addEventListener(\"orientationchange\", (e) => {\r\n                const popUp = document.querySelector('.rotatePop');\r\n\r\n                if(window.orientation == 0) {\r\n                    popUp.style.display = 'flex';    \r\n                } else {\r\n                    popUp.style.display = 'none';\r\n                }\r\n            });\r\n        }\r\n\r\n    }, [])\r\n\r\n    const startCamera = (idealFacingMode, idealResolution) => {\r\n        cameraPhoto.startCamera(idealFacingMode, idealResolution)\r\n            .then(() => {\r\n                console.log('camera is started !');\r\n                setIsCameraReady(true);\r\n            })\r\n            .catch((error) => {\r\n                alert(error);\r\n            });\r\n    }\r\n\r\n    // Pintar foto en canvas\r\n    const displayPicture = (uri) => {\r\n\r\n        const canvas = document.getElementById('photo');\r\n        const ctx = canvas.getContext('2d');\r\n    \r\n        const image = new Image();\r\n        \r\n        image.onload = function() {\r\n            ctx.drawImage(image, canvas.width * 0.1, 0, 470, 350);\r\n\r\n            const frame = new Image();\r\n        \r\n            frame.onload = function() {\r\n                ctx.drawImage(frame, 0, 0, 670, 350);\r\n                setImageToDownload(canvas.toDataURL('image/jpg'));\r\n            };\r\n\r\n            frame.src = './assets/images/frame.png';\r\n        };\r\n        \r\n        image.src = uri;\r\n\r\n    };\r\n\r\n    // Tomar la foto\r\n    const takePhoto = () => {\r\n        const config = {\r\n            sizeFactor: 1\r\n        };\r\n\r\n        if(isTimerSet) { //Cuando se activa el temporizador\r\n\r\n            setShowCounter(true);\r\n\r\n            setTimeout(() => { setCounter(2) }, 1000);\r\n            setTimeout(() => { setCounter(1) }, 2000);\r\n\r\n            setTimeout(() => {\r\n                const dataUri = cameraPhoto.getDataUri(config);\r\n                \r\n                displayPicture(dataUri);\r\n                setPhotoTaken(true);\r\n            }, 3000);\r\n        } else {\r\n            const dataUri = cameraPhoto.getDataUri(config);\r\n            \r\n            displayPicture(dataUri);\r\n            setPhotoTaken(true);\r\n        }\r\n    }\r\n\r\n    //Reiniciar camara \r\n    const restartCamera = () => {\r\n        // Limpiar canvas, contador de timer y volver a mostrar la camara\r\n        setPhotoTaken(false);\r\n        setCounter(3);\r\n        setShowCounter(false);\r\n\r\n        const canvas = document.getElementById('photo');\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    };\r\n\r\n    return (\r\n        \r\n        \r\n        <div className=\"main-container_camera animated fadeIn\">\r\n            <div className='logo-poto1'>\r\n                <img src=\"./assets/images/logo.png\" />\r\n            </div>\r\n            <RotateDevicePop />\r\n            \r\n            {\r\n                photoTaken && \r\n                <h2 className=\"blue animated fadeInLeft\">\r\n                    <span className=\"pink\">¡Te ves genial! ████</span> <br />\r\n                    ████ Guarda tu foto\r\n                </h2>\r\n            }\r\n\r\n            <div className=\"video-wrapper_camera\">\r\n                <div \r\n                    className=\"initial-img_camera\"\r\n                    style={{ display: photoTaken ? 'none' : 'block' }}\r\n                >\r\n                    <img src=\"./assets/images/frame.png\" alt=\"marco\"/>\r\n                    <video\r\n                        ref={videoRef}\r\n                        autoPlay={true}\r\n                    />  \r\n                    \r\n                    {\r\n                        (showCounter) &&\r\n                        <div className=\"timer_camera\">\r\n                            { counter }\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n                <canvas \r\n                    className=\"animated fadeIn\"\r\n                    id=\"photo\" \r\n                    width=\"650\" \r\n                    height=\"350\"\r\n                    style={{ display: photoTaken ? 'block' : 'none' }}\r\n                ></canvas>\r\n            </div>\r\n            <div className='logo-poto'>\r\n                <img src=\"./assets/images/foto2.png\" />\r\n            </div>\r\n\r\n            {\r\n                !photoTaken \r\n                ?\r\n                    <div className=\"btns-wrapper_camera\">\r\n                        <div className=\"div-wrapper\">\r\n                            <button\r\n                                className=\"settings-btn_camera\"\r\n                                onClick={() => setShowModal(true)}\r\n                            ></button>\r\n                            <button\r\n                                className=\"take-btn_camera\"\r\n                                onClick={ takePhoto }\r\n                                disabled={ !isCameraReady }\r\n                            ></button>\r\n                        </div>\r\n                    </div>\r\n                :\r\n                    <div className=\"btns-wrapper_camera\">\r\n                        <div className=\"div-wrapper\">\r\n                            <div className='trie'>\r\n                                <button\r\n                                    className=\"try-btn_camera\"\r\n                                    onClick={ restartCamera }\r\n                                    ></button>\r\n                                {/* <p className=\"blue\">Descarta esta foto <br /> e intenta de nuevo</p> */}\r\n                            </div>\r\n                            <div className='guardar'>\r\n                                <a\r\n                                    id=\"download\"\r\n                                    className=\"save-btn_camera\"\r\n                                    download=\"selfie\"\r\n                                    href={ imageToDownload }\r\n                                ></a>\r\n                                {/* <p className=\"pink\">Guarda tu foto</p> */}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    \r\n            }\r\n\r\n            {/* MODAL DE CONFIGURACIONES */}\r\n            {\r\n                showModal &&\r\n                <SettingsModal \r\n                    setShowModal={ setShowModal } \r\n                    isTimerSet={ isTimerSet }\r\n                    setIsTimerSet={ setIsTimerSet }\r\n                    setIsFullScreen={ setIsFullScreen }\r\n                    isFullScreen={ isFullScreen }\r\n                />\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst RotateDevicePop = () => {\r\n    return (\r\n        <div className=\"rotatePop\">\r\n            <div className=\"icon-box\">\r\n                <div className=\"icon-wrapper animated shakeX\">\r\n                    <img src=\"./assets/images/icon.png\" alt=\"rotate\"/>\r\n                </div>\r\n            </div>\r\n            <div className=\"text-box\">\r\n                <p>\r\n                    Por favor gira tu dispositivo\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default CameraScreen;\r\n","/Users/macuser/Desktop/pothoboot/src/components/SettingsModal.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":45,"column":17,"nodeType":"46","endLine":45,"endColumn":56},{"ruleId":"47","severity":1,"message":"48","line":11,"column":59,"nodeType":"49","messageId":"50","endLine":11,"endColumn":61},{"ruleId":"44","severity":1,"message":"45","line":54,"column":17,"nodeType":"46","endLine":54,"endColumn":56},{"ruleId":"51","severity":1,"message":"52","line":31,"column":23,"nodeType":"53","endLine":31,"endColumn":56},{"ruleId":"47","severity":1,"message":"48","line":38,"column":39,"nodeType":"49","messageId":"50","endLine":38,"endColumn":41},{"ruleId":"44","severity":1,"message":"45","line":129,"column":17,"nodeType":"46","endLine":129,"endColumn":55},{"ruleId":"44","severity":1,"message":"45","line":169,"column":17,"nodeType":"46","endLine":169,"endColumn":56},{"ruleId":"54","severity":1,"message":"55","line":199,"column":33,"nodeType":"46","endLine":204,"endColumn":34},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","Assignments to the 'cameraPhoto' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","no-global-assign","no-unsafe-negation"]