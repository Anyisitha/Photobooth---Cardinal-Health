{"ast":null,"code":"import React from'react';import'./settingsModal.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var SettingsModal=function SettingsModal(_ref){var setShowModal=_ref.setShowModal,setIsTimerSet=_ref.setIsTimerSet,isTimerSet=_ref.isTimerSet,setIsFullScreen=_ref.setIsFullScreen,isFullScreen=_ref.isFullScreen;var handleTimerSet=function handleTimerSet(e){setIsTimerSet(e.target.checked);};var handleFullScreen=function handleFullScreen(element,check){if(check.target.checked){if(element.requestFullScreen){element.requestFullScreen();}else if(element.mozRequestFullScreen){element.mozRequestFullScreen();}else if(element.webkitRequestFullScreen){element.webkitRequestFullScreen();}}else{if(document.exitFullscreen){document.exitFullscreen();}else if(document.mozCancelFullScreen){document.mozCancelFullScreen();}else if(document.webkitExitFullscreen){document.webkitExitFullscreen();}}setIsFullScreen(check.target.checked);};return/*#__PURE__*/_jsx(\"div\",{className:\"modal-bc\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"input-container_modal\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",name:\"timer\",onChange:handleTimerSet,checked:isTimerSet}),/*#__PURE__*/_jsx(\"label\",{children:\"Temporizador\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-container_modal\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",name:\"fullscreen\",onChange:function onChange(e){return handleFullScreen(document.documentElement,e);},checked:isFullScreen}),/*#__PURE__*/_jsx(\"label\",{children:\"Pantalla completa\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"input-container_modal\",children:/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return setShowModal(false);},children:\"Salir\"})})]})});};export default SettingsModal;","map":{"version":3,"sources":["/Users/macuser/Desktop/pothoboot/src/components/SettingsModal.js"],"names":["React","SettingsModal","setShowModal","setIsTimerSet","isTimerSet","setIsFullScreen","isFullScreen","handleTimerSet","e","target","checked","handleFullScreen","element","check","requestFullScreen","mozRequestFullScreen","webkitRequestFullScreen","document","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","documentElement"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAGA,MAAO,qBAAP,C,wFAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAAgF,IAA7EC,CAAAA,YAA6E,MAA7EA,YAA6E,CAA/DC,aAA+D,MAA/DA,aAA+D,CAAhDC,UAAgD,MAAhDA,UAAgD,CAApCC,eAAoC,MAApCA,eAAoC,CAAnBC,YAAmB,MAAnBA,YAAmB,CAElG,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,CAAD,CAAO,CAC1BL,aAAa,CAACK,CAAC,CAACC,MAAF,CAASC,OAAV,CAAb,CACH,CAFD,CAIA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,OAAD,CAAUC,KAAV,CAAoB,CACzC,GAAIA,KAAK,CAACJ,MAAN,CAAaC,OAAjB,CAA0B,CACtB,GAAIE,OAAO,CAACE,iBAAZ,CAA+B,CAC3BF,OAAO,CAACE,iBAAR,GACH,CAFD,IAEO,IAAIF,OAAO,CAACG,oBAAZ,CAAkC,CACrCH,OAAO,CAACG,oBAAR,GACH,CAFM,IAEA,IAAIH,OAAO,CAACI,uBAAZ,CAAqC,CACxCJ,OAAO,CAACI,uBAAR,GACH,CACJ,CARD,IAQO,CACH,GAAIC,QAAQ,CAACC,cAAb,CAA6B,CACzBD,QAAQ,CAACC,cAAT,GACH,CAFD,IAEO,IAAID,QAAQ,CAACE,mBAAb,CAAkC,CACrCF,QAAQ,CAACE,mBAAT,GACH,CAFM,IAEA,IAAIF,QAAQ,CAACG,oBAAb,CAAmC,CACtCH,QAAQ,CAACG,oBAAT,GACH,CACJ,CAEDf,eAAe,CAACQ,KAAK,CAACJ,MAAN,CAAaC,OAAd,CAAf,CACH,CApBD,CAsBA,mBACI,YAAK,SAAS,CAAC,UAAf,uBACI,aAAK,SAAS,CAAC,eAAf,wBACI,aAAK,SAAS,CAAC,uBAAf,wBACI,cACI,IAAI,CAAC,UADT,CAEI,IAAI,CAAC,OAFT,CAGI,QAAQ,CAAEH,cAHd,CAII,OAAO,CAAEH,UAJb,EADJ,cAOI,uCAPJ,GADJ,cAUI,aAAK,SAAS,CAAC,uBAAf,wBACI,cACI,IAAI,CAAC,UADT,CAEI,IAAI,CAAC,YAFT,CAGI,QAAQ,CAAE,kBAACI,CAAD,QAAOG,CAAAA,gBAAgB,CAACM,QAAQ,CAACI,eAAV,CAA2Bb,CAA3B,CAAvB,EAHd,CAII,OAAO,CAAGF,YAJd,EADJ,cAOI,4CAPJ,GAVJ,cAmBI,YAAK,SAAS,CAAC,uBAAf,uBACI,eACI,OAAO,CAAE,yBAAMJ,CAAAA,YAAY,CAAC,KAAD,CAAlB,EADb,mBADJ,EAnBJ,GADJ,EADJ,CA6BH,CAzDD,CAmEA,cAAeD,CAAAA,aAAf","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './settingsModal.css';\r\n\r\nconst SettingsModal = ({ setShowModal, setIsTimerSet, isTimerSet, setIsFullScreen, isFullScreen }) => {\r\n\r\n    const handleTimerSet = (e) => {\r\n        setIsTimerSet(e.target.checked);\r\n    }\r\n\r\n    const handleFullScreen = (element, check) => {\r\n        if (check.target.checked) {\r\n            if (element.requestFullScreen) {\r\n                element.requestFullScreen();\r\n            } else if (element.mozRequestFullScreen) {\r\n                element.mozRequestFullScreen();\r\n            } else if (element.webkitRequestFullScreen) {\r\n                element.webkitRequestFullScreen();\r\n            }\r\n        } else {\r\n            if (document.exitFullscreen) {\r\n                document.exitFullscreen();\r\n            } else if (document.mozCancelFullScreen) {\r\n                document.mozCancelFullScreen();\r\n            } else if (document.webkitExitFullscreen) {\r\n                document.webkitExitFullscreen();\r\n            }\r\n        }\r\n\r\n        setIsFullScreen(check.target.checked);\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal-bc\">\r\n            <div className=\"modal-content\">\r\n                <div className=\"input-container_modal\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        name=\"timer\"\r\n                        onChange={handleTimerSet}\r\n                        checked={isTimerSet}\r\n                    />\r\n                    <label>Temporizador</label>\r\n                </div>\r\n                <div className=\"input-container_modal\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        name=\"fullscreen\"\r\n                        onChange={(e) => handleFullScreen(document.documentElement, e)}\r\n                        checked={ isFullScreen }\r\n                    />\r\n                    <label>Pantalla completa</label>\r\n                </div>\r\n                <div className=\"input-container_modal\">\r\n                    <button\r\n                        onClick={() => setShowModal(false)}\r\n                    >Salir</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nSettingsModal.propTypes = {\r\n    setShowModal: PropTypes.func.isRequired,\r\n    setIsTimerSet: PropTypes.func.isRequired,\r\n    isTimerSet: PropTypes.bool.isRequired,\r\n    setIsFullScreen: PropTypes.func.isRequired,\r\n    isFullScreen: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default SettingsModal;\r\n"]},"metadata":{},"sourceType":"module"}